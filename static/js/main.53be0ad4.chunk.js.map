{"version":3,"sources":["DownloadButton.tsx","immutable-utils.ts","Icon/Icon.tsx","WaypointList/DeleteButton.tsx","WaypointList/useDropZone.ts","classNames.ts","WaypointList/WaypointListItem.tsx","WaypointList/ExtraDropZone.tsx","WaypointList/WaypointList.tsx","Map/NumberedIcon.ts","Map/NumberedPolyline.ts","Map/NumberedMarker.ts","Map/equalLatLngArrays.ts","Map/MapController.ts","Map/MapBoxTileLayer.ts","Map/Map.tsx","App.tsx","index.tsx"],"names":["DownloadButton","waypoints","deleteAt","index","array","slice","insertAt","item","Icon","name","className","DeleteButton","onClick","useDropZone","onMove","onDragEnter","useCallback","event","currentTarget","classList","add","onDragLeave","remove","onDragOver","preventDefault","onDrop","oldIndex","Number","dataTransfer","getData","classNames","namesMap","classes","Object","entries","push","join","WaypointListItem","selected","onDelete","onSelectedIndexChange","handleDelete","handleDragStart","dropEffect","setData","String","dropHandlers","draggable","onDragStart","onMouseEnter","onMouseLeave","undefined","ExtraDropZone","WaypointList","selectedIndex","onChange","newIndex","fromIndex","toIndex","moveIndex","map","wp","i","key","length","createNumberedIcon","Leaflet","html","NumberedIcon","iconSize","NumberedPolyline","events","latlngs","markers","polyline","this","weight","addTo","latlng","addLatLng","createMarker","marker","icon","onDrag","onDragEnd","activelyDragging","on","getLatLng","createNumberedMarker","updatePolylineAt","bind","updateAt","setLatLngs","xs","ys","every","x","equals","forEach","removeFrom","createMarkers","setIcon","INITIAL_POSITION","MapController","id","setView","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","attribution","maxZoom","tileSize","zoomOffset","accessToken","setSelected","Map","useState","setMap","mapEl","useRef","useEffect","current","updateWaypoints","setSelectedWaypoint","ref","App","setWaypoints","setSelectedIndex","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kdAKaA,G,kBAA4D,SAAC,GAAkB,EAAhBC,Y,OCD/DC,EAAW,SAAIC,EAAeC,GAAnB,4BAA2CA,EAAMC,MAAM,EAAGF,IAA1D,YAAqEC,EAAMC,MAAMF,EAAQ,MAQpGG,EAAW,SAAIH,EAAeI,EAASH,GAA5B,4BACnBA,EAAMC,MAAM,EAAGF,IADI,CAEtBI,GAFsB,YAGnBH,EAAMC,MAAMF,MCZJK,G,YAAuE,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,KAA2B,IAArBC,iBAAqB,MAAT,GAAS,EAChH,OAAO,0BAAMA,UAAW,cAAgBD,EAAO,IAAMC,MCA1CC,G,YAAkD,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAC7D,4BAAQF,UAAU,eAAeE,QAASA,GACxC,kBAAC,EAAD,CAAMH,KAAK,cCGFI,EAAc,SAAC,GAA+C,IAA7CH,EAA4C,EAA5CA,UAAWP,EAAiC,EAAjCA,MAAOW,EAA0B,EAA1BA,OAC9C,MAAO,CACLC,YAAaC,uBACX,SAACC,GACCA,EAAMC,cAAcC,UAAUC,IAAIV,KAEpC,CAACA,IAEHW,YAAaL,uBACX,SAACC,GACCA,EAAMC,cAAcC,UAAUG,OAAOZ,KAEvC,CAACA,IAEHa,WAAYP,uBAAY,SAACC,GACvBA,EAAMO,mBACL,IACHC,OAAQT,uBACN,SAACC,GACCA,EAAMO,iBACNP,EAAMC,cAAcC,UAAUG,OAAOZ,GACrC,IAAMgB,EAAWC,OAAOV,EAAMW,aAAaC,QAAQ,eACnDf,EAAOY,EAAUvB,KAEnB,CAACA,EAAOW,EAAQJ,MC9BToB,EAAa,SAACC,GAEzB,IADA,IAAMC,EAAU,GAChB,MAA8BC,OAAOC,QAAQH,GAA7C,eAAwD,CAAC,IAAD,sBAA5CtB,EAA4C,WAEpDuB,EAAQG,KAAK1B,GAGjB,OAAOuB,EAAQI,KAAK,MCKTC,EAAoD,SAAC,GAM3D,IALLlC,EAKI,EALJA,MACAmC,EAII,EAJJA,SACAC,EAGI,EAHJA,SACAzB,EAEI,EAFJA,OACA0B,EACI,EADJA,sBAEMC,EAAezB,uBAAY,kBAAMuB,EAASpC,KAAQ,CAACA,EAAOoC,IAC1DG,EAAkB1B,uBACtB,SAACC,GACCA,EAAMW,aAAae,WAAa,OAChC1B,EAAMW,aAAagB,QAAQ,aAAcC,OAAO1C,MAElD,CAACA,IAEG2C,EAAejC,EAAY,CAAEH,UAAW,2BAA4BP,QAAOW,WAEjF,OACE,sCACEJ,UAAWoB,EAAW,CAAEO,kBAAkB,EAAM,6BAA8BC,IAC9ES,WAAS,EACTC,YAAaN,GACTI,EAJN,CAKEG,aAAcjC,uBAAY,kBAAMwB,EAAsBrC,KAAQ,CAACqC,EAAuBrC,IACtF+C,aAAclC,uBAAY,kBAAMwB,OAAsBW,KAAY,CAACX,MAEnE,kBAAC,EAAD,CAAM/B,KAAK,YAAYC,UAAU,0BACjC,0CAAgBP,EAAQ,GACxB,kBAAC,EAAD,CAAcS,QAAS6B,MClChBW,G,MAA8C,SAAC,GAAuB,IAArBjD,EAAoB,EAApBA,MAAOW,EAAa,EAAbA,OAC7DgC,EAAejC,EAAY,CAAEH,UAAW,wBAAyBP,QAAOW,WAE9E,OAAO,sCAAIJ,UAAU,iBAAoBoC,MCE9BO,EAA4C,SAAC,GAKnD,IAJLpD,EAII,EAJJA,UACAqD,EAGI,EAHJA,cACAC,EAEI,EAFJA,SACAf,EACI,EADJA,sBAEMD,EAAWvB,uBACf,SAACb,GACCoD,EAASrD,EAASC,EAAOF,MAE3B,CAACA,EAAWsD,IAGRzC,EAASE,uBACb,SAACU,EAAkB8B,GACjBD,EPXmB,SAAIE,EAAmBC,EAAiBtD,GAC/D,IAAMG,EAAOH,EAAMqD,GAEnB,OAAIA,EAAYC,EAEPxD,EAASuD,EAAWnD,EAASoD,EAASnD,EAAMH,IAC1CqD,EAAYC,EAEdpD,EAASoD,EAASnD,EAAML,EAASuD,EAAWrD,IAG5CA,EOAIuD,CAAUjC,EAAU8B,EAAUvD,MAEzC,CAACA,EAAWsD,IAGd,OACE,wBAAI7C,UAAU,gBACXT,EAAU2D,KAAI,SAACC,EAAIC,GAAL,OACb,kBAAC,EAAD,CACEC,IAAKD,EACL3D,MAAO2D,EACPvB,SAAUA,EACVzB,OAAQA,EACRwB,SAAUwB,IAAMR,EAChBd,sBAAuBA,OAG3B,kBAAC,EAAD,CAAerC,MAAOF,EAAU+D,OAAQlD,OAAQA,M,uCC1CzCmD,G,MAAqB,SAAC9D,EAAemC,GAChD,OAAO4B,UAAgB,CACrBC,KAAK,GAAD,OAAKhE,EAAQ,GACjBO,UAAWoB,EAAW,CAAEsC,cAAc,EAAM,yBAA0B9B,IACtE+B,SAAU,CAAC,GAAI,QCUNC,EAAb,WAaE,WAAYV,EAAkBW,GAAiC,yBAZvDX,SAYsD,OATtDY,QAA4B,GAS0B,KAPtDC,QAA4B,GAO0B,KALtDC,cAKsD,OAHtDpB,mBAGsD,OAFtDiB,YAEsD,EAC5DI,KAAKf,IAAMA,EACXe,KAAKJ,OAASA,EACdI,KAAKD,SAAWR,WAAiB,GAAI,CAAEU,OAAQ,IAAKC,MAAMjB,GAhB9D,sDAmBmBkB,GACfH,KAAKH,QAAL,sBAAmBG,KAAKH,SAAxB,CAAiCM,IAEjCH,KAAKD,SAASK,UAAUD,GACxBH,KAAKF,QAAQtC,KAAKwC,KAAKK,aAAaF,EAAQH,KAAKF,QAAQT,QAAQa,MAAMF,KAAKf,MAE5Ee,KAAKJ,OAAOhB,SAASoB,KAAKH,WAzB9B,oCA4BwBA,GAA8C,IAAD,OACjE,OAAOA,EAAQZ,IAAIe,KAAKK,aAAcL,MAAMf,KAAI,SAACqB,GAAD,OAAYA,EAAOJ,MAAM,EAAKjB,UA7BlF,mCAgCuBkB,EAAwB3E,GAAgB,IAAD,OAC1D,OCxCgC,SAAC,GAOQ,IAN3C2E,EAM0C,EAN1CA,OACA3E,EAK0C,EAL1CA,MACA+E,EAI0C,EAJ1CA,KACAC,EAG0C,EAH1CA,OACAC,EAE0C,EAF1CA,UACA5C,EAC0C,EAD1CA,sBAEMyC,EAASf,SAAeY,EAAQ,CACpCI,OACAnC,WAAW,IAGTsC,GAAmB,EA4BvB,OAxBAJ,EAAOK,GAAG,aAAa,WACrBD,GAAmB,KAErBJ,EAAOK,GAAG,QAAQ,WAChBH,EAAOhF,EAAO8E,EAAOM,gBAEvBN,EAAOK,GAAG,WAAW,WACnBF,IACAC,GAAmB,KAMrBJ,EAAOK,GAAG,aAAa,WAChBD,GACH7C,EAAsBrC,MAG1B8E,EAAOK,GAAG,YAAY,WACfD,GACH7C,OAAsBW,MAGnB8B,EDDEO,CAAqB,CAC1BrF,QACA2E,SACAI,KAAMjB,EAAmB9D,EAAOA,IAAUwE,KAAKrB,eAC/C6B,OAAQR,KAAKc,iBAAiBC,KAAKf,MACnCS,UAAW,kBAAM,EAAKb,OAAOhB,SAAS,EAAKiB,UAC3ChC,sBAAuBmC,KAAKJ,OAAO/B,0BAvCzC,uCA2C2BrC,EAAe2E,GACtCH,KAAKH,QTxDe,SAAIrE,EAAeI,EAASH,GAA5B,4BACnBA,EAAMC,MAAM,EAAGF,IADI,CAEtBI,GAFsB,YAGnBH,EAAMC,MAAMF,EAAQ,KSqDNwF,CAASxF,EAAO2E,EAAQH,KAAKH,SAC5CG,KAAKD,SAASkB,WAAWjB,KAAKH,WA7ClC,iCAgDoBA,GAA4B,IEhEdqB,EAAsBC,EFgET,QEhEbD,EFkERlB,KAAKH,QElEyBsB,EFkEhBtB,EEjE/BqB,EAAG7B,SAAW8B,EAAG9B,QAAU6B,EAAGE,OAAM,SAACC,EAAGlC,GAAJ,OAAUkC,EAAEC,OAAOH,EAAGhC,UFqE/Da,KAAKH,QAAUA,EACfG,KAAKD,SAASkB,WAAWjB,KAAKH,SAC9BG,KAAKF,QAAQyB,SAAQ,SAACjB,GAAD,OAAYA,EAAOkB,WAAW,EAAKvC,QACxDe,KAAKF,QAAUE,KAAKyB,cAAczB,KAAKH,YAzD3C,kCA4DqBrE,QACUgD,IAAvBwB,KAAKrB,eAA+BqB,KAAKF,QAAQE,KAAKrB,gBACxDqB,KAAKF,QAAQE,KAAKrB,eAAe+C,QAAQpC,EAAmBU,KAAKrB,eAAe,SAEpEH,IAAVhD,GACFwE,KAAKF,QAAQtE,GAAOkG,QAAQpC,EAAmB9D,GAAO,IAExDwE,KAAKrB,cAAgBnD,MAnEzB,KGZMmG,EAAmB,IAAIpC,SAAe,WAAY,YAE3CqC,EAAb,WAKE,WAAYC,EAAYjC,GAAiC,IAAD,gCAJhDX,SAIgD,OAFhDc,cAEgD,EACtDC,KAAKf,IAAMM,MAAYsC,GAAIC,QAAQH,EAAkB,IAErDI,UAAUC,YAAYC,oBAAmB,YAAiB,IAAdC,EAAa,EAAbA,OAC1C,EAAKjD,IAAI6C,QAAQ,CAACI,EAAOC,SAAUD,EAAOE,WAAY,OCd1D7C,YAAkB,qFAAsF,CACtG8C,YACE,6NACFC,QAAS,GACTT,GAAI,qBACJU,SAAU,IACVC,YAAa,EACbC,YAAa,2FDUWvC,MAAMF,KAAKf,KAEnCe,KAAKD,SAAW,IAAIJ,EAAiBK,KAAKf,IAAKW,GAE/CI,KAAKf,IAAI0B,GAAG,SAAS,gBAAGR,EAAH,EAAGA,OAAH,OAA2C,EAAKJ,SAASK,UAAUD,MAhB5F,4DAmByB7E,GACrB0E,KAAKD,SAASkB,WAAW3F,KApB7B,0CAuB6BE,GACzBwE,KAAKD,SAAS2C,YAAYlH,OAxB9B,KEIamH,EAA0B,SAAC,GAAmE,IAAjErH,EAAgE,EAAhEA,UAAWqD,EAAqD,EAArDA,cAAeC,EAAsC,EAAtCA,SAAUf,EAA4B,EAA5BA,sBAA4B,EAClF+E,qBADkF,mBACjG3D,EADiG,KAC5F4D,EAD4F,KAGlGC,EAAQC,iBAAuB,MAuBrC,OApBAC,qBAAU,YACH/D,GAAO6D,EAAMG,SAChBJ,EAAO,IAAIjB,EAAckB,EAAMG,QAAQpB,GAAI,CAAEjD,WAAUf,6BAExD,CAACiF,EAAO7D,EAAK4D,EAAQjE,EAAUf,IAGlCmF,qBAAU,WACJ/D,GACFA,EAAIiE,gBAAgB5H,KAErB,CAAC2D,EAAK3D,IAGT0H,qBAAU,WACJ/D,GACFA,EAAIkE,oBAAoBxE,KAEzB,CAACM,EAAKN,IAEF,yBAAK5C,UAAU,MAAM8F,GAAG,QAAQuB,IAAKN,KC/BjCO,EAAoB,WAAO,IAAD,EACHT,mBAA2B,IADxB,mBAC9BtH,EAD8B,KACnBgI,EADmB,OAEKV,wBAA6BpE,GAFlC,mBAE9BG,EAF8B,KAEf4E,EAFe,KAIrC,OACE,yBAAKxH,UAAU,OACb,yBAAKA,UAAU,gBACb,wBAAIA,UAAU,cAAd,iBACA,yBAAKA,UAAU,aACb,kBAAC,EAAD,CACET,UAAWA,EACXqD,cAAeA,EACfC,SAAU0E,EACVzF,sBAAuB0F,KAG3B,kBAAC,EAAD,CAAgBjI,UAAWA,KAE7B,yBAAKS,UAAU,gBACb,kBAAC,EAAD,CACET,UAAWA,EACXqD,cAAeA,EACfC,SAAU0E,EACVzF,sBAAuB0F,OCzBjCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.53be0ad4.chunk.js","sourcesContent":["import React from \"react\";\nimport * as Leaflet from \"leaflet\";\nimport \"./DownloadButton.css\";\nimport { createGpx } from \"./gpx\";\n\nexport const DownloadButton: React.FC<{ waypoints: Leaflet.LatLng[] }> = ({ waypoints }) => {\n  return (\n    // eslint-disable-next-line react/jsx-no-target-blank\n    <a href={createXmlDataUrl(createGpx(waypoints))} className=\"DownloadButton\" target=\"_blank\" download=\"route.gpx\">\n      Download your Route\n    </a>\n  );\n};\n\nconst createXmlDataUrl = (data: string): string => URL.createObjectURL(new Blob([data], { type: \"application/xml\" }));\n","// Helpers for working with arrays without mutating them\n//\n// All these functions take arguments in data-last style.\n\nexport const deleteAt = <T>(index: number, array: T[]): T[] => [...array.slice(0, index), ...array.slice(index + 1)];\n\nexport const updateAt = <T>(index: number, item: T, array: T[]): T[] => [\n  ...array.slice(0, index),\n  item,\n  ...array.slice(index + 1),\n];\n\nexport const insertAt = <T>(index: number, item: T, array: T[]): T[] => [\n  ...array.slice(0, index),\n  item,\n  ...array.slice(index),\n];\n\nexport const moveIndex = <T>(fromIndex: number, toIndex: number, array: T[]): T[] => {\n  const item = array[fromIndex];\n\n  if (fromIndex < toIndex) {\n    // moving forwards: first add new, then remove old\n    return deleteAt(fromIndex, insertAt(toIndex, item, array));\n  } else if (fromIndex > toIndex) {\n    // moving backwards: first remove old, then insert new\n    return insertAt(toIndex, item, deleteAt(fromIndex, array));\n  } else {\n    // no change\n    return array;\n  }\n};\n","import React from \"react\";\nimport \"./Icon.css\";\n\nexport const Icon: React.FC<{ name: \"draggable\" | \"delete\"; className?: string }> = ({ name, className = \"\" }) => {\n  return <span className={\"Icon Icon--\" + name + \" \" + className} />;\n};\n","import React from \"react\";\nimport { Icon } from \"../Icon/Icon\";\nimport \"./DeleteButton.css\";\n\nexport const DeleteButton: React.FC<{ onClick: () => void }> = ({ onClick }) => (\n  <button className=\"DeleteButton\" onClick={onClick}>\n    <Icon name=\"delete\" />\n  </button>\n);\n","import { useCallback } from \"react\";\n\nexport interface DropZoneCfg {\n  className: string;\n  index: number;\n  onMove: (fromIndex: number, toIndex: number) => void;\n}\n\n// Custom hook to share the drop-zone logic between normal WaypointListItems and additional ExtraDropZone in the end\nexport const useDropZone = ({ className, index, onMove }: DropZoneCfg) => {\n  return {\n    onDragEnter: useCallback(\n      (event: React.DragEvent<HTMLLIElement>) => {\n        event.currentTarget.classList.add(className);\n      },\n      [className],\n    ),\n    onDragLeave: useCallback(\n      (event: React.DragEvent<HTMLLIElement>) => {\n        event.currentTarget.classList.remove(className);\n      },\n      [className],\n    ),\n    onDragOver: useCallback((event: React.DragEvent<HTMLLIElement>) => {\n      event.preventDefault();\n    }, []),\n    onDrop: useCallback(\n      (event: React.DragEvent<HTMLLIElement>) => {\n        event.preventDefault();\n        event.currentTarget.classList.remove(className);\n        const oldIndex = Number(event.dataTransfer.getData(\"text/plain\"));\n        onMove(oldIndex, index);\n      },\n      [index, onMove, className],\n    ),\n  };\n};\n","/**\n * A simplified implementation of https://www.npmjs.com/package/classnames\n */\nexport const classNames = (namesMap: Record<string, boolean>): string => {\n  const classes = [];\n  for (const [name, enabled] of Object.entries(namesMap)) {\n    if (enabled) {\n      classes.push(name);\n    }\n  }\n  return classes.join(\" \");\n};\n","import React, { useCallback } from \"react\";\nimport { Icon } from \"../Icon/Icon\";\nimport \"./WaypointListItem.css\";\nimport { DeleteButton } from \"./DeleteButton\";\nimport { useDropZone } from \"./useDropZone\";\nimport { classNames } from \"../classNames\";\n\nexport interface WaypointListItemProps {\n  index: number;\n  selected: boolean;\n  onDelete: (index: number) => void;\n  onMove: (oldIndex: number, newIndex: number) => void;\n  onSelectedIndexChange: (index?: number) => void;\n}\n\nexport const WaypointListItem: React.FC<WaypointListItemProps> = ({\n  index,\n  selected,\n  onDelete,\n  onMove,\n  onSelectedIndexChange,\n}) => {\n  const handleDelete = useCallback(() => onDelete(index), [index, onDelete]);\n  const handleDragStart = useCallback(\n    (event: React.DragEvent<HTMLLIElement>) => {\n      event.dataTransfer.dropEffect = \"move\";\n      event.dataTransfer.setData(\"text/plain\", String(index));\n    },\n    [index],\n  );\n  const dropHandlers = useDropZone({ className: \"WaypointListItem--target\", index, onMove });\n\n  return (\n    <li\n      className={classNames({ WaypointListItem: true, \"WaypointListItem--selected\": selected })}\n      draggable\n      onDragStart={handleDragStart}\n      {...dropHandlers}\n      onMouseEnter={useCallback(() => onSelectedIndexChange(index), [onSelectedIndexChange, index])}\n      onMouseLeave={useCallback(() => onSelectedIndexChange(undefined), [onSelectedIndexChange])}\n    >\n      <Icon name=\"draggable\" className=\"WaypointListItem_grip\" />\n      <span>Waypoint {index + 1}</span>\n      <DeleteButton onClick={handleDelete} />\n    </li>\n  );\n};\n","import React from \"react\";\nimport \"./ExtraDropZone.css\";\nimport { useDropZone } from \"./useDropZone\";\n\nexport interface ExtraDropZoneProps {\n  index: number;\n  onMove: (oldIndex: number, newIndex: number) => void;\n}\n\nexport const ExtraDropZone: React.FC<ExtraDropZoneProps> = ({ index, onMove }) => {\n  const dropHandlers = useDropZone({ className: \"ExtraDropZone--target\", index, onMove });\n\n  return <li className=\"ExtraDropZone\" {...dropHandlers} />;\n};\n","import React, { useCallback } from \"react\";\nimport * as Leaflet from \"leaflet\";\nimport { deleteAt, moveIndex } from \"../immutable-utils\";\nimport \"./WaypointList.css\";\nimport { WaypointListItem } from \"./WaypointListItem\";\nimport { ExtraDropZone } from \"./ExtraDropZone\";\n\nexport interface WaypointListProps {\n  waypoints: Leaflet.LatLng[];\n  selectedIndex?: number;\n  onChange: (waypoints: Leaflet.LatLng[]) => void;\n  onSelectedIndexChange: (index?: number) => void;\n}\n\nexport const WaypointList: React.FC<WaypointListProps> = ({\n  waypoints,\n  selectedIndex,\n  onChange,\n  onSelectedIndexChange,\n}) => {\n  const onDelete = useCallback(\n    (index: number) => {\n      onChange(deleteAt(index, waypoints));\n    },\n    [waypoints, onChange],\n  );\n\n  const onMove = useCallback(\n    (oldIndex: number, newIndex: number) => {\n      onChange(moveIndex(oldIndex, newIndex, waypoints));\n    },\n    [waypoints, onChange],\n  );\n\n  return (\n    <ul className=\"WaypointList\">\n      {waypoints.map((wp, i) => (\n        <WaypointListItem\n          key={i}\n          index={i}\n          onDelete={onDelete}\n          onMove={onMove}\n          selected={i === selectedIndex}\n          onSelectedIndexChange={onSelectedIndexChange}\n        />\n      ))}\n      <ExtraDropZone index={waypoints.length} onMove={onMove} />\n    </ul>\n  );\n};\n","import * as Leaflet from \"leaflet\";\nimport { classNames } from \"../classNames\";\nimport \"./NumberedIcon.css\";\n\nexport const createNumberedIcon = (index: number, selected: boolean): Leaflet.DivIcon => {\n  return Leaflet.divIcon({\n    html: `${index + 1}`,\n    className: classNames({ NumberedIcon: true, \"NumberedIcon--selected\": selected }),\n    iconSize: [25, 25],\n  });\n};\n","import * as Leaflet from \"leaflet\";\nimport { updateAt } from \"../immutable-utils\";\nimport { equalLatLngArrays } from \"./equalLatLngArrays\";\nimport { createNumberedIcon } from \"./NumberedIcon\";\nimport { createNumberedMarker } from \"./NumberedMarker\";\n\nexport interface NumberedPolylineEvents {\n  onChange: (waypoints: Leaflet.LatLng[]) => void;\n  onSelectedIndexChange: (index?: number) => void;\n}\n\n/**\n * A Polyline with numbered markers on all corners.\n * Also supports selecting a marker at index.\n *\n * For simplicity it gets added to map by calling the constructor.\n * A more thorough implementation should support addTo() method.\n */\nexport class NumberedPolyline {\n  private map: Leaflet.Map;\n\n  // Don't mutate this, it's exposed externally through onChange() event\n  private latlngs: Leaflet.LatLng[] = [];\n  // Can be mutated, only used internally\n  private markers: Leaflet.Marker[] = [];\n\n  private polyline: Leaflet.Polyline;\n\n  private selectedIndex?: number;\n  private events: NumberedPolylineEvents;\n\n  constructor(map: Leaflet.Map, events: NumberedPolylineEvents) {\n    this.map = map;\n    this.events = events;\n    this.polyline = Leaflet.polyline([], { weight: 6 }).addTo(map);\n  }\n\n  public addLatLng(latlng: Leaflet.LatLng) {\n    this.latlngs = [...this.latlngs, latlng];\n\n    this.polyline.addLatLng(latlng);\n    this.markers.push(this.createMarker(latlng, this.markers.length).addTo(this.map));\n\n    this.events.onChange(this.latlngs);\n  }\n\n  private createMarkers(latlngs: Leaflet.LatLng[]): Leaflet.Marker[] {\n    return latlngs.map(this.createMarker, this).map((marker) => marker.addTo(this.map));\n  }\n\n  private createMarker(latlng: Leaflet.LatLng, index: number) {\n    return createNumberedMarker({\n      index,\n      latlng,\n      icon: createNumberedIcon(index, index === this.selectedIndex),\n      onDrag: this.updatePolylineAt.bind(this),\n      onDragEnd: () => this.events.onChange(this.latlngs),\n      onSelectedIndexChange: this.events.onSelectedIndexChange,\n    });\n  }\n\n  private updatePolylineAt(index: number, latlng: Leaflet.LatLng) {\n    this.latlngs = updateAt(index, latlng, this.latlngs);\n    this.polyline.setLatLngs(this.latlngs);\n  }\n\n  public setLatLngs(latlngs: Leaflet.LatLng[]) {\n    // Avoid full update when no actual change\n    if (equalLatLngArrays(this.latlngs, latlngs)) {\n      return;\n    }\n\n    this.latlngs = latlngs;\n    this.polyline.setLatLngs(this.latlngs);\n    this.markers.forEach((marker) => marker.removeFrom(this.map));\n    this.markers = this.createMarkers(this.latlngs);\n  }\n\n  public setSelected(index?: number) {\n    if (this.selectedIndex !== undefined && this.markers[this.selectedIndex]) {\n      this.markers[this.selectedIndex].setIcon(createNumberedIcon(this.selectedIndex, false));\n    }\n    if (index !== undefined) {\n      this.markers[index].setIcon(createNumberedIcon(index, true));\n    }\n    this.selectedIndex = index;\n  }\n}\n","import * as Leaflet from \"leaflet\";\n\nexport interface NumberedMarkerConfig {\n  latlng: Leaflet.LatLng;\n  index: number;\n  icon: Leaflet.Icon | Leaflet.DivIcon;\n  onDrag: (index: number, latlng: Leaflet.LatLng) => void;\n  onDragEnd: () => void;\n  onSelectedIndexChange: (index?: number) => void;\n}\n\nexport const createNumberedMarker = ({\n  latlng,\n  index,\n  icon,\n  onDrag,\n  onDragEnd,\n  onSelectedIndexChange,\n}: NumberedMarkerConfig): Leaflet.Marker => {\n  const marker = Leaflet.marker(latlng, {\n    icon,\n    draggable: true,\n  });\n\n  let activelyDragging = false;\n\n  // While moving the marker, keep polyline and waypoints array in sync,\n  // At the end of moving, fire onChange event.\n  marker.on(\"dragstart\", () => {\n    activelyDragging = true;\n  });\n  marker.on(\"drag\", () => {\n    onDrag(index, marker.getLatLng());\n  });\n  marker.on(\"dragend\", () => {\n    onDragEnd();\n    activelyDragging = false;\n  });\n\n  // Only fire selection change events when we aren't actively dragging.\n  // Otherwise the selection change will trigger icon change,\n  // which will result in cancelling of the drag.\n  marker.on(\"mouseover\", () => {\n    if (!activelyDragging) {\n      onSelectedIndexChange(index);\n    }\n  });\n  marker.on(\"mouseout\", () => {\n    if (!activelyDragging) {\n      onSelectedIndexChange(undefined);\n    }\n  });\n  return marker;\n};\n","import * as Leaflet from \"leaflet\";\n\nexport const equalLatLngArrays = (xs: Leaflet.LatLng[], ys: Leaflet.LatLng[]): boolean => {\n  return xs.length === ys.length && xs.every((x, i) => x.equals(ys[i]));\n};\n","import \"leaflet/dist/leaflet.css\";\nimport * as Leaflet from \"leaflet\";\nimport { createMapBoxTileLayer } from \"./MapBoxTileLayer\";\nimport { NumberedPolyline, NumberedPolylineEvents } from \"./NumberedPolyline\";\n\n// Have a hike at Vilsandi nature reserve\nconst INITIAL_POSITION = new Leaflet.LatLng(58.3728214, 21.8631477);\n\nexport class MapController {\n  private map: Leaflet.Map;\n\n  private polyline: NumberedPolyline;\n\n  constructor(id: string, events: NumberedPolylineEvents) {\n    this.map = Leaflet.map(id).setView(INITIAL_POSITION, 12);\n\n    navigator.geolocation.getCurrentPosition(({ coords }) => {\n      this.map.setView([coords.latitude, coords.longitude], 12);\n    });\n\n    createMapBoxTileLayer().addTo(this.map);\n\n    this.polyline = new NumberedPolyline(this.map, events);\n\n    this.map.on(\"click\", ({ latlng }: Leaflet.LeafletMouseEvent) => this.polyline.addLatLng(latlng));\n  }\n\n  public updateWaypoints(waypoints: Leaflet.LatLng[]) {\n    this.polyline.setLatLngs(waypoints);\n  }\n\n  public setSelectedWaypoint(index?: number) {\n    this.polyline.setSelected(index);\n  }\n}\n","import * as Leaflet from \"leaflet\";\n\nexport const createMapBoxTileLayer = () =>\n  Leaflet.tileLayer(\"https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}\", {\n    attribution:\n      'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n    maxZoom: 18,\n    id: \"mapbox/streets-v11\",\n    tileSize: 512,\n    zoomOffset: -1,\n    accessToken: \"pk.eyJ1IjoicmVua3UiLCJhIjoiY2tnZmVzZGdtMHB6MDJzbmFoMmRzdms2eCJ9.lStxev2R9jj1QV-MvNRFtQ\",\n  });\n","import React, { useEffect, useRef, useState } from \"react\";\nimport \"./Map.css\";\nimport * as Leaflet from \"leaflet\";\nimport { MapController } from \"./MapController\";\n\nexport interface MapProps {\n  waypoints: Leaflet.LatLng[];\n  selectedIndex?: number;\n  onChange: (waypoints: Leaflet.LatLng[]) => void;\n  onSelectedIndexChange: (index?: number) => void;\n}\n\nexport const Map: React.FC<MapProps> = ({ waypoints, selectedIndex, onChange, onSelectedIndexChange }) => {\n  const [map, setMap] = useState<MapController>();\n\n  const mapEl = useRef<HTMLDivElement>(null);\n\n  // When DOM available and map not initialized\n  useEffect(() => {\n    if (!map && mapEl.current) {\n      setMap(new MapController(mapEl.current.id, { onChange, onSelectedIndexChange }));\n    }\n  }, [mapEl, map, setMap, onChange, onSelectedIndexChange]);\n\n  // When map initialized and waypoints changed\n  useEffect(() => {\n    if (map) {\n      map.updateWaypoints(waypoints);\n    }\n  }, [map, waypoints]);\n\n  // When map initialized and selection changed\n  useEffect(() => {\n    if (map) {\n      map.setSelectedWaypoint(selectedIndex);\n    }\n  }, [map, selectedIndex]);\n\n  return <div className=\"Map\" id=\"mapid\" ref={mapEl} />;\n};\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport * as Leaflet from \"leaflet\";\nimport { DownloadButton } from \"./DownloadButton\";\nimport { WaypointList } from \"./WaypointList/WaypointList\";\nimport { Map } from \"./Map/Map\";\n\nexport const App: React.FC<{}> = () => {\n  const [waypoints, setWaypoints] = useState<Leaflet.LatLng[]>([]);\n  const [selectedIndex, setSelectedIndex] = useState<number | undefined>(undefined);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <h1 className=\"App__title\">Route Builder</h1>\n        <div className=\"App__list\">\n          <WaypointList\n            waypoints={waypoints}\n            selectedIndex={selectedIndex}\n            onChange={setWaypoints}\n            onSelectedIndexChange={setSelectedIndex}\n          />\n        </div>\n        <DownloadButton waypoints={waypoints} />\n      </div>\n      <div className=\"App__mapArea\">\n        <Map\n          waypoints={waypoints}\n          selectedIndex={selectedIndex}\n          onChange={setWaypoints}\n          onSelectedIndexChange={setSelectedIndex}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}